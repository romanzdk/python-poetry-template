[build-system]
requires = ["poetry-core", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "project-name"
version = "0.1.0"
description = "A template Poetry project structure."

packages = [{ include = "project_name" }]

authors = ["Roman Zydyk <romanzdk+pypi@gmail.com>"]
maintainers = ["Roman Zydyk <romanzdk+pypi@gmail.com>"]

include = ["LICENSE", "py.typed"]
license = "MIT"
readme = "README.md"

homepage = "https://pypi.org/project/project-name/"
repository = "https://github.com/romanzdk/project-name"
documentation = "https://github.com/romanzdk/project-name/tree/main/docs"

keywords = ["python3"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.group.dev.dependencies]
ruff = "^0.4.2"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.6"
nox-poetry = "^1.0.3"

[tool.poetry.group.dev]
optional = true


[tool.poetry.urls]
"Tracker" = "https://github.com/romanzdk/project-name/issues"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = """
-v \
--doctest-modules \
--cov=./ \
--cov-append \
--cov-report term-missing \
--cov-report html:tests/coverage-html \
--cov-report xml:tests/coverage.xml \
--ignore=docs/
"""
testpaths = ["tests"]


[tool.coverage.run]
branch = true
relative_files = true
omit = ["tests/*", "docs/*"]

[tool.ruff]
lint.select = [
    "A",   # Builtins
    "ANN", # Annotations
    "ARG", # Unused arguments
    "B",   # Bugbear
    "BLE", # Blind except
    "C4",  # Comprehensions
    "C90", # mccabe
    "COM", # Commas
    "D1",  # Undocumented public elements
    "D2",  # Docstring conventions
    "D3",  # Triple double quotes
    "D4",  # Docstring text format
    "DTZ", # Datetimes
    "EM",  # Error messages
    "ERA", # Commented-out code
    "EXE", # Executable
    "F",   # Pyflakes
    "FA",  # __future__ annotations
    "FLY", # F-strings
    # "FURB", # Refurb
    "G",   # Logging format
    "I",   # Isort
    "ICN", # Import conventions
    "INP", # Disallow PEP-420 (Implicit namespace packages)
    "INT", # gettext
    "ISC", # Implicit str concat
    # "LOG",  # Logging
    "N",    # PEP-8 Naming
    "NPY",  # Numpy
    "PERF", # Unnecessary performance costs
    "PGH",  # Pygrep hooks
    "PIE",  # Unnecessary code
    "PL",   # Pylint
    "PT",   # Pytest
    "PTH",  # Use Pathlib
    "PYI",  # Stub files
    "Q",    # Quotes
    "RET",  # Return
    "RUF",  # Ruff
    "RSE",  # Raise
    "S",    # Bandit
    "SIM",  # Code simplification
    "SLF",  # Private member access
    "SLOT", # __slots__
    "T10",  # Debugger
    "T20",  # Print
    "TCH",  # Type checking
    "TID",  # Tidy imports
    "TRY",  # Exception handling
    "UP",   # Pyupgrade
    "W",    # Warnings
    "YTT",  # sys.version
]
lint.ignore = [
    "D203",    # One blank line before class docstring
    "D212",    # Multi-line summary first line
    "PLR0913", # Too many arguments
    "D100",    # Missing docstring in public module
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
]
lint.ignore-init-module-imports = true
line-length = 120
# preview = true
show-fixes = true
src = ["project_name"]
target-version = "py312"


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"


[tool.ruff.lint.mccabe]
max-complexity = 10


[tool.ruff.lint.per-file-ignores]
# https://docs.astral.sh/ruff/rules/
"__init__.py" = ["F401", "F403", "F405"]
"tests/*" = ["ANN", "ARG", "INP001", "S101"]


[tool.ruff.lint.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.mypy]
strict_optional = true

# Enable this if you are using 3rd party imports without
# type annotations
ignore_missing_imports = true

# Ensure full coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true

# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true

# Know exactly what you're doing
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
warn_unreachable = true
show_error_codes = true

# Explicit is better than implicit
no_implicit_optional = true

# mypy per-module options:
[[tool.mypy.overrides]]
module = "tests"
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "noxfile"
disallow_untyped_decorators = false
